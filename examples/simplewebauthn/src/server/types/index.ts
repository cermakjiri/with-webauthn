import type { AuthenticatorTransportFuture, Base64URLString, CredentialDeviceType } from '@simplewebauthn/types';
import type { Timestamp } from 'firebase/firestore';

import type { PasskeyProvider } from '~server/services/aaguid';

export type Passkey = {
    id: string;
    /**
     * User ID generated by Firebase
     * Used as primary key
     */
    userId: string;

    /**
     * Credential ID as a base64url encoded string
     */
    credentialId: Base64URLString;

    /**
     * Credential Public Key as a base64url encoded string
     */
    credentialPublicKey: string;

    /**
     * How many times the credential has been used
     * For privacy reasons, Apple does not update this value.
     */
    credentialCounter: number;

    /**
     * Credential Backed Up - has the credential been stored in a (Apple|Google|etc.) keychain?
     */
    credentialBackedUp: boolean;

    /**
     * Credential Device Type
     */
    credentialDeviceType: CredentialDeviceType;

    /**
     * Authenticator Transports
     */
    transports: AuthenticatorTransportFuture[];

    /**
     * Timestamps
     */
    createdAt: Timestamp;
    lastUsedAt: Timestamp;

    /**
     * Relaying Party ID
     */
    rpId: string;

    /**
     * Detected authenticator provider based AAGUID.
     */
    provider: PasskeyProvider | null;
};

export type User = {
    /**
     * User ID generated by Firebase
     * Used as primary key
     */
    id: string;

    /**
     * Array of passkey IDs (Passkey primary keys)
     */
    passkeyIds: string[];

    /**
     * Username required by WebAuthn API
     */
    username: string;
};

/**
 * Server needs to store the challenge generated with public key options for attestation and assertion ceremonies.
 * The challenge is then retrieved during verification of the ceremony result in a subsequent API request or deleted once expired.
 */
export type ChallengeSession = {
    id: string;

    challenge: Base64URLString;
    rpId: Base64URLString;
    origin: string;

    /**
     * ISO date string
     */
    expiresAt: string;
} & (
    | {
          type: 'attestation';
          username: string;
      }
    | {
          type: 'assertion';
      }
);
